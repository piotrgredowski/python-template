[project]
name = "{{ cookiecutter.project_name }}"
version = "0.1.0"
description = "{{ cookiecutter.project_short_description }}"
authors = [
    { name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.author_email }}" },
]
dependencies = [
    "icecream>=2.1.3",
    "loguru>=0.7.2",
    "tqdm>=4.66.1",
    "pydantic>=2.3.0",
    "python-dotenv>=1.0.0",
]
readme = "README.md"
requires-python = ">= {{ cookiecutter.python_version }}"

[tool.rye]
managed = true
dev-dependencies = [
    "mypy>=1.6.1",
    "pre-commit>=3.5.0",
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "ruff>=0.1.2",
]

[tool.rye.scripts]
main = { cmd = "python -m src.{{ cookiecutter.package_name }}" }
# main = { cmd = "python -m src.{{ cookiecutter.package_name }}" }
tests = { cmd = "python -m pytest" }


[tool.black]
line-length = 100
target-version = ["{{ 'py' + cookiecutter.python_version.replace('.', '') }}"]

[tool.ruff]
line-length = 100
ignore-init-module-imports = true
target-version = "{{ 'py' + cookiecutter.python_version.replace('.', '') }}"
exclude = ["tests"]
include = []

select = [
    "F",   # Pyflakes
    "E",   # pycodestyle
    "W",   # pycodestyle
    "C90", # mccabe
    "I",   # isort
    "N",   # pep8-naming
    # "D", # pydocstyle
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    # "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    # "S", # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "COM", # flake8-commas
    # "CPY", # flake8-copyright
    "C4", # flake8-comprehensions
    # "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    # "DJ", # flake8-django
    # "EM", # flake8-errmsg
    "EXE", # flake8-executable
    # "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    # "G", # flake8-logging-format
    # "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    # "T20", # flake8-print
    # "PYI",  # flake8-pyi
    "PT", # flake8-pytest-style
    "Q",  # flake8-quotes
    # "RSE",  # flake8-raise
    "RET", # flake8-return
    # "SLF",  # flake8-self
    # "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    # "TCH", # flake8-type-checking
    # "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    # "PTH", # flake8-use-pathlib
    # "TD",  # flake8-todos
    # "FIX", # flake8-fixme
    # "ERA", # eradicate
    # "PD", # pandas-vet
    # "PGH", # pygrep-hooks
    "PL", # Pylint
    # "TRY", # tryceratops
    # "FLY", # flynt
    # "NPY", # NumPy-specific rules
    # "AIR", # Airflow
    # "PERF", # Perflint
    "RUF", # Ruff-specific rules
]
unfixable = ["F841"]
ignore = ["PLR2004", "PLW1510"]

[tool.ruff.isort]
known-first-party = []
force-single-line = true

[tool.ruff.per-file-ignores]
"**/tests/**/*.py" = ["E501", "SLF001"]

[tool.ruff.mccabe]
max-complexity = 7

[tool.pytest.ini_options]
markers = [
    "slow: mark test as slow to run",
    "integration: mark test as integration test",
    "functional: mark test as functional test",
]
addopts = ["--cov=src.{{ cookiecutter.package_name }}", "--cov-report=xml"]

[tool.coverage.report]
fail_under = 100

exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover',
    'if __name__ == .__main__.:',
]

[tool.mypy]
python_version = "{{ cookiecutter.python_version }}"
exclude = ['tests']
disallow_any_unimported = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
check_untyped_defs = true
show_error_codes = true
